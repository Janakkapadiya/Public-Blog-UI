import { fetchArticles, fetchCategories } from "@/http";
import {
  IArticle,
  ICategory,
  ICollectionResponse,
  IPagination,
  IQueryOptions,
} from "@/types";
import { AxiosResponse } from "axios";
import React from "react";
//@ts-ignore
import qs from "qs";
import Tabs from "@/components/Tabs";
import Articles from "@/components/Articles";
import { capitalizeFirstLetter, makeCategory } from "@/utils";
import Pagination from "@/components/Pagination";
import Head from "next/head";

const Category = async ({ searchParams, params }: any) => {
  const options: Partial<IQueryOptions> = {
    populate: ["author.avatar"],
    sort: ["id:desc"],
    filters: {
      category: {
        slug: params.category,
      },
    },
  };

  if (searchParams.search) {
    options.filters = {
      Title: {
        $containsi: searchParams.search,
      },
    };
  }

  const formattedCategory = () => {
    return capitalizeFirstLetter(
      "Public Blog " + makeCategory(params.category)
    );
  };

  const articlesQuery = qs.stringify(options);

  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories();

  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticles(articlesQuery);

  const { page, pageCount }: IPagination = articles.meta.pagination;

  return (
    <>
      <Head>
        <title>{formattedCategory()}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="../public/logo-removebg-preview.png" />
      </Head>
      <Tabs categories={categories.data} />
      <Articles articles={articles.data} />
    </>
  );
};

export default Category;
